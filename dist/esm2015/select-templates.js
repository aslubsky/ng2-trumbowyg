// import {EventEmitter}         from '@angular/core';
const DEFAULT_ICON = 'themes/default/assets/img/t-icon.png';
export class TrumbowygSelectTemplatesPlugin {
    static init(editor, lang) {
        TrumbowygSelectTemplatesPlugin.editor = editor;
        TrumbowygSelectTemplatesPlugin.lang = lang;
        //console.log('init', editor, editor.langs, lang, editor.langs[lang].selectTemplatesNoData);
        //TrumbowygSelectResourcesPlugin.onSearch = new EventEmitter();
        editor.plugins.selectTemplates = {
            init: function (trumbowyg) {
                trumbowyg.o.plugins.selectTemplates = trumbowyg.o.plugins.selectTemplates || {};
                trumbowyg.addBtnDef('selectTemplates', {
                    fn: function (params) {
                        // console.log('selectImageCb', params, trumbowyg, editorImages);
                        TrumbowygSelectTemplatesPlugin.selectTemplatesCb(params, trumbowyg);
                    }
                });
            },
            tag: 'img'
        };
        TrumbowygSelectTemplatesPlugin.templates.push({
            id: 'tab-no-data',
            label: editor.langs[lang].selectTemplatesNoData,
            elements: []
        });
        TrumbowygSelectTemplatesPlugin.allTemplates['template-no-data'] =
            '<div>' + editor.langs[lang].selectTemplatesNoData + '</div>';
    }
    static selectTemplatesCb(params, t) {
        var pfx = t.o.prefix;
        //console.log('editorResources', editorResources);
        var html = [];
        html.push('<div class="modal-container templates-select">');
        html.push('<ul class="cbr2-tabs" role="tablist">');
        TrumbowygSelectTemplatesPlugin.templates.forEach((templateSet, i) => {
            html.push('<li role="' + templateSet.id + '" class="cbr2-tabs-item ' + (i == 0 ? 'cbr-tabs-active' : '') + '">');
            html.push('   <a data-tab="' + templateSet.id + '"  role="tab" data-toggle="tab">' + templateSet.label + '</a>');
            html.push('</li>');
        });
        html.push('</ul>');
        html.push('<div class="cbr-tab-content">');
        TrumbowygSelectTemplatesPlugin.templates.forEach((templateSet, i) => {
            html.push('   <div role="tabpanel" id="' + templateSet.id + '" class="cbr-tab-pane ' + (i == 0 ? 'active' : '') + '">');
            html.push('   <ul class="templates-list template-gallery list-unstyled">');
            templateSet.elements.forEach((template, j) => {
                template.icon = template.icon || DEFAULT_ICON;
                html.push('   <li title="' + template.description + '" class="item"><label>' +
                    '<img src="' + template.icon + '" class="select-template-icon"><input type="radio" value="' + template.id + '" name="template">' +
                    '<span class="title"> ' + template.title + '</span>' +
                    '<span class="description"> ' + template.description + '</span>' +
                    '</label></li>');
            });
            html.push('   </ul>');
            html.push('   </div>');
        });
        html.push('</div>');
        html.push('</div>');
        //console.log('html', html);
        var $modal = t.openModal(TrumbowygSelectTemplatesPlugin.editor.langs[TrumbowygSelectTemplatesPlugin.lang].selectTemplatesHeader, html.join(''))
            .on('tbwconfirm', function () {
            var selected = jQuery('input:checked', $modal);
            var val = selected.val();
            // console.log(val, allTemplates[val]);
            // jQuery(this).off(pfx + 'confirm');
            t.restoreRange();
            t.syncCode();
            if (val) {
                TrumbowygSelectTemplatesPlugin.editor.insertHtml(t, TrumbowygSelectTemplatesPlugin.allTemplates[val]);
            }
            setTimeout(function () {
                t.closeModal();
            }, 250);
        })
            .on('tbwcancel', function () {
            t.restoreRange();
            t.closeModal();
        });
        $modal.addClass('big');
        jQuery('.cbr2-tabs a', $modal).off('click').on('click', function (e) {
            e.preventDefault();
            jQuery('.cbr2-tabs-item', $modal).removeClass('cbr-tabs-active');
            jQuery(this).parent().addClass('cbr-tabs-active');
            //    console.log('O_O', $(this).attr('data-tab'));
            jQuery('.cbr-tab-content .cbr-tab-pane', $modal).removeClass('active');
            jQuery('#' + jQuery(this).attr('data-tab')).addClass('active');
        });
        jQuery('.template-gallery li label', $modal).off('click').on('click', function (e) {
            //console.log('O_O', e, $(this));
            jQuery('.template-gallery li', $modal).removeClass('active');
            jQuery(this).parent().addClass('active');
        });
    }
    static setTemplates(templates, allTemplates) {
        TrumbowygSelectTemplatesPlugin.templates = templates;
        TrumbowygSelectTemplatesPlugin.allTemplates = allTemplates;
    }
}
TrumbowygSelectTemplatesPlugin.templates = [];
TrumbowygSelectTemplatesPlugin.allTemplates = {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LXRlbXBsYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9hc2x1YnNreS93b3JrL2NvbGxhYm9yYXRvci9uZzItdHJ1bWJvd3lnL3NyYy8iLCJzb3VyY2VzIjpbInNlbGVjdC10ZW1wbGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBSXRELE1BQU0sWUFBWSxHQUFHLHNDQUFzQyxDQUFDO0FBRTVELE1BQU0sT0FBTyw4QkFBOEI7SUFPaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFXLEVBQUUsSUFBWTtRQUN4Qyw4QkFBOEIsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQy9DLDhCQUE4QixDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFM0MsNEZBQTRGO1FBRTVGLCtEQUErRDtRQUUvRCxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsR0FBRztZQUM3QixJQUFJLEVBQUUsVUFBVSxTQUFjO2dCQUMxQixTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztnQkFDaEYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRTtvQkFDbkMsRUFBRSxFQUFFLFVBQVUsTUFBVzt3QkFDckIsaUVBQWlFO3dCQUNqRSw4QkFBOEIsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7b0JBQ3hFLENBQUM7aUJBQ0osQ0FBQyxDQUFDO1lBQ1AsQ0FBQztZQUNELEdBQUcsRUFBRSxLQUFLO1NBQ2IsQ0FBQTtRQUdELDhCQUE4QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDMUMsRUFBRSxFQUFFLGFBQWE7WUFDakIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCO1lBQy9DLFFBQVEsRUFBRSxFQUFFO1NBQ2YsQ0FBQyxDQUFDO1FBQ0gsOEJB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TSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRSxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyw0QkFBNEIsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQU07WUFDbEYsaUNBQWlDO1lBQ2pDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQWdCLEVBQUUsWUFBaUI7UUFDMUQsOEJBQThCLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUNyRCw4QkFBOEIsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQy9ELENBQUM7O0FBdkhhLHdDQUFTLEdBQVUsRUFBRSxDQUFDO0FBQ3RCLDJDQUFZLEdBQVEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHtFdmVudEVtaXR0ZXJ9ICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmRlY2xhcmUgdmFyIGpRdWVyeTogYW55O1xuXG5jb25zdCBERUZBVUxUX0lDT04gPSAndGhlbWVzL2RlZmF1bHQvYXNzZXRzL2ltZy90LWljb24ucG5nJztcblxuZXhwb3J0IGNsYXNzIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbiB7XG4gICAgcHVibGljIHN0YXRpYyB0ZW1wbGF0ZXM6IGFueVtdID0gW107XG4gICAgcHVibGljIHN0YXRpYyBhbGxUZW1wbGF0ZXM6IGFueSA9IHt9O1xuXG4gICAgcHVibGljIHN0YXRpYyBlZGl0b3I6IGFueTtcbiAgICBwdWJsaWMgc3RhdGljIGxhbmc6IHN0cmluZztcblxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdChlZGl0b3I6IGFueSwgbGFuZzogc3RyaW5nKSB7XG4gICAgICAgIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi5lZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi5sYW5nID0gbGFuZztcblxuICAgICAgICAvL2NvbnNvbGUubG9nKCdpbml0JywgZWRpdG9yLCBlZGl0b3IubGFuZ3MsIGxhbmcsIGVkaXRvci5sYW5nc1tsYW5nXS5zZWxlY3RUZW1wbGF0ZXNOb0RhdGEpO1xuXG4gICAgICAgIC8vVHJ1bWJvd3lnU2VsZWN0UmVzb3VyY2VzUGx1Z2luLm9uU2VhcmNoID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgICAgIGVkaXRvci5wbHVnaW5zLnNlbGVjdFRlbXBsYXRlcyA9IHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh0cnVtYm93eWc6IGFueSkge1xuICAgICAgICAgICAgICAgIHRydW1ib3d5Zy5vLnBsdWdpbnMuc2VsZWN0VGVtcGxhdGVzID0gdHJ1bWJvd3lnLm8ucGx1Z2lucy5zZWxlY3RUZW1wbGF0ZXMgfHwge307XG4gICAgICAgICAgICAgICAgdHJ1bWJvd3lnLmFkZEJ0bkRlZignc2VsZWN0VGVtcGxhdGVzJywge1xuICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gKHBhcmFtczogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2VsZWN0SW1hZ2VDYicsIHBhcmFtcywgdHJ1bWJvd3lnLCBlZGl0b3JJbWFnZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgVHJ1bWJvd3lnU2VsZWN0VGVtcGxhdGVzUGx1Z2luLnNlbGVjdFRlbXBsYXRlc0NiKHBhcmFtcywgdHJ1bWJvd3lnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhZzogJ2ltZydcbiAgICAgICAgfVxuXG5cbiAgICAgICAgVHJ1bWJvd3lnU2VsZWN0VGVtcGxhdGVzUGx1Z2luLnRlbXBsYXRlcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiAndGFiLW5vLWRhdGEnLFxuICAgICAgICAgICAgbGFiZWw6IGVkaXRvci5sYW5nc1tsYW5nXS5zZWxlY3RUZW1wbGF0ZXNOb0RhdGEsXG4gICAgICAgICAgICBlbGVtZW50czogW11cbiAgICAgICAgfSk7XG4gICAgICAgIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi5hbGxUZW1wbGF0ZXNbJ3RlbXBsYXRlLW5vLWRhdGEnXSA9XG4gICAgICAgICAgICAnPGRpdj4nICsgZWRpdG9yLmxhbmdzW2xhbmddLnNlbGVjdFRlbXBsYXRlc05vRGF0YSArICc8L2Rpdj4nO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHNlbGVjdFRlbXBsYXRlc0NiKHBhcmFtczogYW55LCB0OiBhbnkpIHtcbiAgICAgICAgdmFyIHBmeDogc3RyaW5nID0gdC5vLnByZWZpeDtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnZWRpdG9yUmVzb3VyY2VzJywgZWRpdG9yUmVzb3VyY2VzKTtcblxuICAgICAgICB2YXIgaHRtbDogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBodG1sLnB1c2goJzxkaXYgY2xhc3M9XCJtb2RhbC1jb250YWluZXIgdGVtcGxhdGVzLXNlbGVjdFwiPicpO1xuICAgICAgICBodG1sLnB1c2goJzx1bCBjbGFzcz1cImNicjItdGFic1wiIHJvbGU9XCJ0YWJsaXN0XCI+Jyk7XG4gICAgICAgIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGVTZXQsIGkpID0+IHtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPGxpIHJvbGU9XCInICsgdGVtcGxhdGVTZXQuaWQgKyAnXCIgY2xhc3M9XCJjYnIyLXRhYnMtaXRlbSAnICsgKGkgPT0gMCA/ICdjYnItdGFicy1hY3RpdmUnIDogJycpICsgJ1wiPicpO1xuICAgICAgICAgICAgaHRtbC5wdXNoKCcgICA8YSBkYXRhLXRhYj1cIicgKyB0ZW1wbGF0ZVNldC5pZCArICdcIiAgcm9sZT1cInRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCI+JyArIHRlbXBsYXRlU2V0LmxhYmVsICsgJzwvYT4nKTtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPC9saT4nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaHRtbC5wdXNoKCc8L3VsPicpO1xuICAgICAgICBodG1sLnB1c2goJzxkaXYgY2xhc3M9XCJjYnItdGFiLWNvbnRlbnRcIj4nKTtcblxuXG4gICAgICAgIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGVTZXQsIGkpID0+IHtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnICAgPGRpdiByb2xlPVwidGFicGFuZWxcIiBpZD1cIicgKyB0ZW1wbGF0ZVNldC5pZCArICdcIiBjbGFzcz1cImNici10YWItcGFuZSAnICsgKGkgPT0gMCA/ICdhY3RpdmUnIDogJycpICsgJ1wiPicpO1xuICAgICAgICAgICAgaHRtbC5wdXNoKCcgICA8dWwgY2xhc3M9XCJ0ZW1wbGF0ZXMtbGlzdCB0ZW1wbGF0ZS1nYWxsZXJ5IGxpc3QtdW5zdHlsZWRcIj4nKTtcbiAgICAgICAgICAgIHRlbXBsYXRlU2V0LmVsZW1lbnRzLmZvckVhY2goKHRlbXBsYXRlOiBhbnksIGo6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLmljb24gPSB0ZW1wbGF0ZS5pY29uIHx8IERFRkFVTFRfSUNPTjtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goJyAgIDxsaSB0aXRsZT1cIicgKyB0ZW1wbGF0ZS5kZXNjcmlwdGlvbiArICdcIiBjbGFzcz1cIml0ZW1cIj48bGFiZWw+JyArXG4gICAgICAgICAgICAgICAgICAgICc8aW1nIHNyYz1cIicgKyB0ZW1wbGF0ZS5pY29uICsgJ1wiIGNsYXNzPVwic2VsZWN0LXRlbXBsYXRlLWljb25cIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCInICsgdGVtcGxhdGUuaWQgKyAnXCIgbmFtZT1cInRlbXBsYXRlXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInRpdGxlXCI+ICcgKyB0ZW1wbGF0ZS50aXRsZSArICc8L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImRlc2NyaXB0aW9uXCI+ICcgKyB0ZW1wbGF0ZS5kZXNjcmlwdGlvbiArICc8L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L2xhYmVsPjwvbGk+Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnICAgPC91bD4nKTtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnICAgPC9kaXY+Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGh0bWwucHVzaCgnPC9kaXY+Jyk7XG4gICAgICAgIGh0bWwucHVzaCgnPC9kaXY+Jyk7XG5cblxuICAgICAgICAvL2NvbnNvbGUubG9nKCdodG1sJywgaHRtbCk7XG4gICAgICAgIHZhciAkbW9kYWwgPSB0Lm9wZW5Nb2RhbChUcnVtYm93eWdTZWxlY3RUZW1wbGF0ZXNQbHVnaW4uZWRpdG9yLmxhbmdzW1RydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi5sYW5nXS5zZWxlY3RUZW1wbGF0ZXNIZWFkZXIsIGh0bWwuam9pbignJykpXG4gICAgICAgICAgICAub24oJ3Rid2NvbmZpcm0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0galF1ZXJ5KCdpbnB1dDpjaGVja2VkJywgJG1vZGFsKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gc2VsZWN0ZWQudmFsKCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codmFsLCBhbGxUZW1wbGF0ZXNbdmFsXSk7XG4gICAgICAgICAgICAgICAgLy8galF1ZXJ5KHRoaXMpLm9mZihwZnggKyAnY29uZmlybScpO1xuXG4gICAgICAgICAgICAgICAgdC5yZXN0b3JlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB0LnN5bmNDb2RlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIFRydW1ib3d5Z1NlbGVjdFRlbXBsYXRlc1BsdWdpbi5lZGl0b3IuaW5zZXJ0SHRtbCh0LCBUcnVtYm93eWdTZWxlY3RUZW1wbGF0ZXNQbHVnaW4uYWxsVGVtcGxhdGVzW3ZhbF0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0LmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbigndGJ3Y2FuY2VsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHQucmVzdG9yZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgdC5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgJG1vZGFsLmFkZENsYXNzKCdiaWcnKTtcblxuICAgICAgICBqUXVlcnkoJy5jYnIyLXRhYnMgYScsICRtb2RhbCkub2ZmKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlOiBhbnkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgalF1ZXJ5KCcuY2JyMi10YWJzLWl0ZW0nLCAkbW9kYWwpLnJlbW92ZUNsYXNzKCdjYnItdGFicy1hY3RpdmUnKTtcbiAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnY2JyLXRhYnMtYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIC8vICAgIGNvbnNvbGUubG9nKCdPX08nLCAkKHRoaXMpLmF0dHIoJ2RhdGEtdGFiJykpO1xuICAgICAgICAgICAgalF1ZXJ5KCcuY2JyLXRhYi1jb250ZW50IC5jYnItdGFiLXBhbmUnLCAkbW9kYWwpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIGpRdWVyeSgnIycgKyBqUXVlcnkodGhpcykuYXR0cignZGF0YS10YWInKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgalF1ZXJ5KCcudGVtcGxhdGUtZ2FsbGVyeSBsaSBsYWJlbCcsICRtb2RhbCkub2ZmKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlOiBhbnkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ09fTycsIGUsICQodGhpcykpO1xuICAgICAgICAgICAgalF1ZXJ5KCcudGVtcGxhdGUtZ2FsbGVyeSBsaScsICRtb2RhbCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzZXRUZW1wbGF0ZXModGVtcGxhdGVzOiBhbnlbXSwgYWxsVGVtcGxhdGVzOiBhbnkpIHtcbiAgICAgICAgVHJ1bWJvd3lnU2VsZWN0VGVtcGxhdGVzUGx1Z2luLnRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgICAgICAgVHJ1bWJvd3lnU2VsZWN0VGVtcGxhdGVzUGx1Z2luLmFsbFRlbXBsYXRlcyA9IGFsbFRlbXBsYXRlcztcbiAgICB9XG59XG4iXX0=