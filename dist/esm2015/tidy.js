import 'rxjs/add/operator/toPromise';
export class TrumbowygTidyPlugin {
    static init(editor, lang, http) {
        TrumbowygTidyPlugin.editor = editor;
        editor.plugins.tidy = {
            init: (t) => {
                // console.log('TrumbowygCodemirrorPlugin');
                t.toggle = () => {
                    var prefix = t.o.prefix;
                    t.semanticCode(false, true);
                    setTimeout(function () {
                        t.doc.activeElement.blur();
                        t.$box.toggleClass(prefix + 'editor-hidden ' + prefix + 'editor-visible');
                        t.$btnPane.toggleClass(prefix + 'disable');
                        t.$btnPane.find('.' + prefix + 'viewHTML-button').toggleClass(prefix + 'active');
                        if (t.$box.hasClass(prefix + 'editor-visible')) {
                            t.$ta.attr('tabindex', -1);
                        }
                        else {
                            if (TrumbowygTidyPlugin.editor.tidyUrl) {
                                // console.log(t.$ed.html());
                                http.post(TrumbowygTidyPlugin.editor.tidyUrl, t.$ed.html()).toPromise()
                                    .then((res) => {
                                    // console.log('tidy res', res.text());
                                    t.$ta.val(res.text());
                                });
                            }
                            t.$ta.removeAttr('tabindex');
                        }
                    }, 0);
                };
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlkeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aWR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sNkJBQTZCLENBQUM7QUFFckMsTUFBTSxPQUFPLG1CQUFtQjtJQUdyQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsSUFBZ0I7UUFDMUQsbUJBQW1CLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVwQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRztZQUNsQixJQUFJLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRTtnQkFDYiw0Q0FBNEM7Z0JBRTVDLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO29CQUNaLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO29CQUN4QixDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDNUIsVUFBVSxDQUFDO3dCQUNQLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO3dCQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLEdBQUcsTUFBTSxHQUFHLGdCQUFnQixDQUFDLENBQUM7d0JBQzFFLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQzt3QkFDM0MsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUM7d0JBQ2pGLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLEVBQUU7NEJBQzVDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO3lCQUM5Qjs2QkFBTTs0QkFDSCxJQUFJLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0NBQ3BDLDZCQUE2QjtnQ0FDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUU7cUNBQ2xFLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO29DQUNmLHVDQUF1QztvQ0FDdkMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7Z0NBQzFCLENBQUMsQ0FBQyxDQUFDOzZCQUNWOzRCQUNELENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3lCQUNoQztvQkFDTCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsQ0FBQyxDQUFDO1lBQ04sQ0FBQztTQUNKLENBQUE7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvdG9Qcm9taXNlJztcblxuZXhwb3J0IGNsYXNzIFRydW1ib3d5Z1RpZHlQbHVnaW4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZWRpdG9yOiBhbnk7XG5cbiAgICBwdWJsaWMgc3RhdGljIGluaXQoZWRpdG9yOiBhbnksIGxhbmc6IHN0cmluZywgaHR0cDogSHR0cENsaWVudCkge1xuICAgICAgICBUcnVtYm93eWdUaWR5UGx1Z2luLmVkaXRvciA9IGVkaXRvcjtcblxuICAgICAgICBlZGl0b3IucGx1Z2lucy50aWR5ID0ge1xuICAgICAgICAgICAgaW5pdDogKHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdUcnVtYm93eWdDb2RlbWlycm9yUGx1Z2luJyk7XG5cbiAgICAgICAgICAgICAgICB0LnRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZWZpeCA9IHQuby5wcmVmaXg7XG4gICAgICAgICAgICAgICAgICAgIHQuc2VtYW50aWNDb2RlKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRvYy5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuJGJveC50b2dnbGVDbGFzcyhwcmVmaXggKyAnZWRpdG9yLWhpZGRlbiAnICsgcHJlZml4ICsgJ2VkaXRvci12aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LiRidG5QYW5lLnRvZ2dsZUNsYXNzKHByZWZpeCArICdkaXNhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LiRidG5QYW5lLmZpbmQoJy4nICsgcHJlZml4ICsgJ3ZpZXdIVE1MLWJ1dHRvbicpLnRvZ2dsZUNsYXNzKHByZWZpeCArICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LiRib3guaGFzQ2xhc3MocHJlZml4ICsgJ2VkaXRvci12aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LiR0YS5hdHRyKCd0YWJpbmRleCcsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRydW1ib3d5Z1RpZHlQbHVnaW4uZWRpdG9yLnRpZHlVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codC4kZWQuaHRtbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cC5wb3N0KFRydW1ib3d5Z1RpZHlQbHVnaW4uZWRpdG9yLnRpZHlVcmwsIHQuJGVkLmh0bWwoKSkudG9Qcm9taXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0aWR5IHJlcycsIHJlcy50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuJHRhLnZhbChyZXMudGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LiR0YS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19